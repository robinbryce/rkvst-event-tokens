---
version: "3"
silent: true

vars:
  CURL_CICD_DEV: "curl -s -H 'Accept: application/vnd.github.v3.raw' -L https://api.github.com/repos/polysensus/cicd-dev-infra/contents"
  TUSKS: ".local/tuskfiles"
  DIAMOND_DEPLOY: "node node_modules/@polysensus/diamond-deploy/dist/deploycli.cjs"
  FORGE_OUT_DIR: ".local/forge/out"

dotenv: [".env"]

tasks:
  bootstrap:
    desc: fetch pre-requisites for developer and ci/cd
    cmds:
      - |
        mkdir -p {{.TUSKS}}
        cd {{.TUSKS}}
        {{.CURL_CICD_DEV}}/js/tusk-jspkg.yml?ref=v0.0.5 -o tusk-jspkg.yml
        {{.CURL_CICD_DEV}}/hardhat/tusk-hardhat.yml?ref=v0.0.5 -o tusk-hardhat.yml

  release:tag:
    desc: create a release tag and commit and push, defaults to a patch release
    cmds:
      - |
        tusk -q -f {{.TUSKS}}/tusk-jspkg.yml version-update {{.CLI_ARGS}}

  forge:update:forge-std:
    desc: update the forge-std support contract library submodule
    cmds:
      - forge update lib/forge-std

  build:
    desc: |
      build the contracts and copy the abis in to packaged directory

      (Note: once the contracts are verified we can get the abi from public sources)

    cmds:
      - task: format
      - forge build --sizes
      - task build:forge:export-abi
      # generate the typescript bindings
      - npx hardhat compile
      - npx tsc
      - npx rollup -c

  build:forge:export-abi:
    desc: copy the abis for the contracts defined in this repo to the packaged abi folder.
    cmds:
      - |
        echo "copying abi files from build"
        cp {{.FORGE_OUT_DIR}}/Diamond.sol/Diamond.json abi/
        cp {{.FORGE_OUT_DIR}}/DiamondNew.sol/DiamondNew.json abi/
        for d in $(ls -d {{.FORGE_OUT_DIR}}/*Facet.sol); do cp $d/*Facet.json abi/; done
        cp {{.FORGE_OUT_DIR}}/IERC*.sol/IERC*.json abi
        for d in $(ls -d {{.FORGE_OUT_DIR}}/IRKVST*.sol); do cp $d/IRKVST*.json abi/; done

  format:
    desc: run source linters and formatters in write back mode
    cmds:
      - |
        npx prettier --write 'contracts/**/*.sol'
        npx prettier --write 'lib/**/*.sol'
  publish:
    desc: publish the package to npm (use -- --dry-run to pre flight)
    cmds:
      - |
        npm publish --access public {{.CLI_ARGS}}

  git:sub:reset:
    desc: hard reset all submodules, foundry uses them to import deps
    cmds:
      - git submodule foreach --recursive git reset --hard
