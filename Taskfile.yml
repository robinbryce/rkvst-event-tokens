---
version: "3"
silent: true

vars:
  CURL_CICD_DEV: "curl -s -H 'Accept: application/vnd.github.v3.raw' -L https://api.github.com/repos/polysensus/cicd-dev-infra/contents"
  TUSKS: ".local/tuskfiles"
  LOCAL_BIN: ".local/bin"
  FORGE_OUT_DIR: ".local/forge/out"
  FACETS_EXCLUDE: abi/facets-exclude.json
  DIAMOND_DEPLOY_JSON: 'dist/diamond-deploy.json'

dotenv: [".env"]

tasks:
  bootstrap:
    desc: fetch pre-requisites for developer and ci/cd
    cmds:
      - |
        mkdir -p {{.TUSKS}}
        cd {{.TUSKS}}
        {{.CURL_CICD_DEV}}/js/tusk-jspkg.yml?ref=v0.0.5 -o tusk-jspkg.yml
        {{.CURL_CICD_DEV}}/hardhat/tusk-hardhat.yml?ref=v0.0.5 -o tusk-hardhat.yml

        mkdir -p {{.LOCAL_BIN}}
        curl -sL https://git.io/tusk | bash -s -- -b {{.LOCAL_BIN}} latest

        # go-task install runes can be found in .github/workflows/ci.yml

  release:tag:
    desc: create a release tag and commit and push, defaults to a patch release
    cmds:
      - |
        tusk -q -f {{.TUSKS}}/tusk-jspkg.yml version-update {{.CLI_ARGS}}

  forge:update:forge-std:
    desc: update the forge-std support contract library submodule
    cmds:
      - forge update lib/forge-std

  build:
    desc: |
      build the contracts and copy the abis in to packaged directory

      (Note: once the contracts are verified we can get the abi from public sources)

    cmds:
      - task: format
      - forge build --sizes
      - task build:forge:export-abi
      - task: build:facets-exclude
      - task: build:diamond-deploy-json
      # generate the typescript bindings
      - npx hardhat compile
      - npx tsc
      - npx rollup -c

  build:forge:export-abi:
    desc: copy the abis for the contracts defined in this repo to the packaged abi folder.
    cmds:
      - |
        echo "copying abi files from build"
        cp {{.FORGE_OUT_DIR}}/Diamond.sol/Diamond.json abi/
        cp {{.FORGE_OUT_DIR}}/DiamondNew.sol/DiamondNew.json abi/
        for d in $(ls -d {{.FORGE_OUT_DIR}}/*Facet.sol); do cp $d/*Facet.json abi/; done
        cp {{.FORGE_OUT_DIR}}/IERC*.sol/IERC*.json abi
        for d in $(ls -d {{.FORGE_OUT_DIR}}/IRKVST*.sol); do cp $d/IRKVST*.json abi/; done

  build:facets-exclude:
    desc: |
      re generate the current diamond deploy exclusions

      note: this command needs to be maintained to account for any new
      collisions introduces in future changes. facet:collisions can help with
      that.
    cmds:
      - |
        npx diamond-deploy list \
          -I facet -i {{.FORGE_OUT_DIR}} \
          --collisions-only --format json \
          | jq -r '[ .[] | select(.name=="ERC1155Facet") ]' \
          | tee {{.FACETS_EXCLUDE}} \
          || true

  build:diamond-deploy-json:
    desc: generate the deployable list of facets
    cmds:
      - |
        npx diamond-deploy list \
          -I facet -i {{.FORGE_OUT_DIR}} \
          -n Diamond DiamondNew \
          --exclude {{.FACETS_EXCLUDE}} \
          --format json | tee {{.DIAMOND_DEPLOY_JSON}}

  test:
    desc: run unit and integration tests
    cmds:
      - npx hardhat test

  deploy:mumbai:
    desc: deploy the contracts to polygon mumbai
    dotenv: [".env", ".env.local", ".env.deploy"]
    cmds:
      - |
        npx diamond-deploy \
          -u "${MUMBAI_URL}" \
          -d "${DEPLOY_ACCOUNT_KEY}" \
          diamond-new \
            --replace \
            --gaslimit 3500000 \
            --legacy \
            --diamond-owner-key "${OWNER_ACCOUNT_KEY}" \
            --diamond-init-name DiamondNew \
            --diamond-init-args \
              '[{"typeURIs": []}]' \
            -f {{.DIAMOND_DEPLOY_JSON}}


  deploy:hh:
    desc: clean and new deployment on hardhat
    cmds:
      - task: deploy:hh-prepare
      - task: deploy:hh-new

  deploy:hh-prepare:
    desc: force restart the external hh server (requires go-tusk)
    cmds:
      - |
        tusk -f {{.TUSKS}}/tusk-hardhat.yml stop-node
        tusk -f {{.TUSKS}}/tusk-hardhat.yml start-node

  deploy:hh-new:
    desc: deploy the contracts for a local hardhat server
    cmds:
      - |
        npx diamond-deploy \
          -u "{{.HARDHAT_URL}}" \
          -d "hardhat:10" \
          diamond-new \
            --replace \
            --gaslimit 3500000 \
            --legacy \
            --diamond-owner-key "hardhat:11" \
            --diamond-init-name DiamondNew \
            --diamond-init-args \
              '[{"typeURIs": ["ASSET", "EVENT"]}]' \
            -f {{.DIAMOND_DEPLOY_JSON}}

  deploy:hh-up:
    desc: |
      make a hardhat upgrade diamond deploy
    cmds:
      - |
        # for hardhat, as we reset lots it is likely the nonce is low so finding every time is fine.
        PROXY_ADDRESS=$(npx diamond-deploy \
          -u "{{.HARDHAT_URL}}" \
          -d "hardhat:10" \
          find)

        npx diamond-deploy \
          -u "{{.HARDHAT_URL}}" \
          -d "hardhat:10" \
          diamond-up \
            --diamond-address ${PROXY_ADDRESS} \
            --replace \
            --gaslimit 3500000 \
            --legacy \
            --diamond-owner-key "hardhat:11" \
            --ignore-names DiamondNew \
            -f {{.DIAMOND_DEPLOY_JSON}}


  format:
    desc: run source linters and formatters in write back mode
    cmds:
      - |
        npx prettier --write 'contracts/**/*.sol'
        npx prettier --write 'lib/**/*.sol'
        npx prettier --write 'src/**/*.js'
        npx prettier --write 'test/**/*.js'
  publish:
    desc: publish the package to npm (use -- --dry-run to pre flight)
    cmds:
      - |
        npm publish --access public {{.CLI_ARGS}}

  git:sub:reset:
    desc: hard reset all submodules, foundry uses them to import deps
    cmds:
      - git submodule foreach --recursive git reset --hard
